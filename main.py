#Importando todas as rea√ß√µes definidas no m√≥dulo content.reactions:
from content.reactions import *
# Importando a biblioteca Streamlit para criar a interface web:
import streamlit as st

# Define a configura√ß√£o inicial das p√°ginas
page = st.sidebar.selectbox("Escolha a p√°gina:", ["Simulador", "Tabela Peri√≥dica"])

# Condi√ß√£o para p√°gina da tabela periodica :
if page == "Tabela Peri√≥dica":
    st.title("Tabela Peri√≥dica üî¨")
    st.image("assets/tabela.png")
    st.stop() #Para a execu√ß√£o do script aqui, impedindo que a parte do simulador seja exibida

# L√≥gica condicional para exibir a p√°gina do Simulador:
if page != "Tabela Peri√≥dica":
    st.title("MolLab üß™")

st.set_page_config(page_title="Simulador de Rea√ß√µes Qu√≠micas Inorg√¢nicas", layout="centered")
# Cria um seletor para o usu√°rio escolher uma rea√ß√£o qu√≠mica da lista carregada
reaction_name = st.selectbox("Escolha a rea√ß√£o qu√≠mica:", list(reactions.keys()))
reaction = reactions[reaction_name]

# Exibe a equa√ß√£o da rea√ß√£o selecionada
st.markdown("---")

st.markdown(f"**Equa√ß√£o da rea√ß√£o:** {reaction['equation']}")

st.write("### Informe as quantidades iniciais dos reagentes (mol):")

# Input das quantidades dos reagentes
reactant_amounts = {}
for reactant in reaction["reactants"]:
    reactant_amounts[reactant] = st.number_input(f"Quantidade de {reactant} (mol):", min_value=0.0, value=1.0, step=0.1)

def calculate_products(reactant_amounts, reaction):
    # Usar a estequiometria simples para determinar o reagente limitante e calcular os produtos formados
    # Determinar coeficiente estequiom√©trico dos reagentes
    coef_reactants = reaction["reactants"]
    coef_products = reaction["products"]

    # Calcular o n√∫mero de vezes que a rea√ß√£o pode ocorrer (baseado no reagente limitante)
    limiting_reagent = min(
        coef_reactants,st.warning("‚ö†Ô∏è  Aten√ß√£o! Esta mistura pode ser perigosa.")
        key=lambda r: reactant_amounts[r] / coef_reactants[r] if coef_reactants[r] > 0 else float('inf')
    )
    times_reaction = reactant_amounts[limiting_reagent] / coef_reactants[limiting_reagent] if coef_reactants[limiting_reagent] > 0 else 0

    # Quantidades formadas dos produtos
    product_amounts = {prod: coef_products[prod] * times_reaction for prod in coef_products}

    st.markdown("---")

    # Quantidades restantes dos reagentes
    reactants_remaining = {re: reactant_amounts[re] - coef_reactants[re] * times_reaction for re in coef_reactants}

    return product_amounts, reactants_remaining, limiting_reagent

# Condi√ß√£o para executar a a fun√ß√£o calculate_products, criando se√ß√µes e exibindo os respectivos resultados 
if st.button("Calcular produtos da rea√ß√£o üñ©"):
    products_formed, reactants_left, limiting_reagent = calculate_products(reactant_amounts, reaction)
    st.write("### Produtos formados (mol):")
    for p, amt in products_formed.items():
        st.write(f"{p}: {amt:.2f} mol")

    # Reagentes restantes
    st.write("### Reagentes restantes (mol):")
    for r, amt in reactants_left.items():
        st.write(f"{r}: {amt:.2f} mol")

    # Determinar o reagente limitante
    st.write("### Reagente limitante:")
    st.write(f"{limiting_reagent} √© o reagente limitante.")

    # st.bar_chart(products_formed)   

    # if "enthalpy" in reaction:
    #     st.write("### Entalpia de rea√ß√£o:")
    #     st.write(f"{reaction['enthalpy']} kJ/mol")

    #     # Adiciona alerta de seguran√ßa com base na entalpia
    #     alerta_entalpia = verificar_entalpia(reaction["enthalpy"])
    #     st.warning(alerta_entalpia)
    st.markdown("---")
    
if not reaction.get("segura", True):
    st.warning("‚ö†Ô∏è Aten√ß√£o! Esta mistura pode ser perigosa.")
